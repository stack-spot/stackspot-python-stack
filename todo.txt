# Sugestões: 
- TODO Implementar no futuro loop  para solicitar informações dentro yaml
- TODO Implementar cobolcase e pascalcase
- TODO Implementar para permitir regex de match no computed-input
- TODO Implementar para permitir regex de search no computed-input, obtendo lista dos elementos
- TODO Implementar para permitir utilizar when com exists:
  - type: edit-yaml
    trigger: after-render
    path: serverless.yaml
    encoding: utf-8
    changes:
      - yamlpath: "$.functions.{{entity_folder_name}}.events"
        update:
          value: "httpApi: '{{ method_sanitized }} {{ uri_sanitized }}'"
        when:
          exists: "httpApi: '{{ method_sanitized }} {{ uri_sanitized }}'"
- TODO Ajustar documentação:
    - Ajuste: teria que ser duas tabs no conteúdo do search
      Página: https://docs.stackspot.com/v4.1.0/docs/creators-guide/yaml-files/declarative-hooks/edit/
      Procurar por: Os atributos string, pattern e snippet não devem ser usados em conjunto na ação search.
      - search:
        string: "# Text inserted in first line"
        # or
        pattern: (some)\s+(regular)\s+(expression)
        # or
        snippet: snippets/snippet.txt

GET|PUT|DELETE|PATCH: /supermercado/{supermercado-id}/client/{id}
GET|POST: /supermercado/{supermercado-id}/client

entity by user: Client
entity folder name: client
entity file name: model.py
entity class name: Client

operation_id by user: create-or-update-client
operation_id folder name: create_or_update_client
operation_id method name: create_or_update_client

method by user: Post
method on controller: post


contain_request_model: true (PUT, POST, PATCH)
contain_request_params: true # Não é query params
request_model: Client

uri by user: /supermercado/{supermercado-id}/client/{id}
uri para descricao FastAPI: /supermercado/{supermercado_id}/client/{id}

request_query_params: ['supermercado_id', 'id']

def post_user(user_request: UserRequest):
    # implementar lógica
    # implementar conversão
    return UserResposne(user_request.id)

- DONE          [endpoint-create] Trocar de int parametros para str
- DONE          [endpoint-create] Escrever metodos http upper
- DONE          [endpoint-create] Adicionar no array de function do arquivo serveless.yaml o novo endpoint
- DONE          [endpoint-create] Ajustar nome do import e adição no include_router do arquivo 'local.py'
- DONE          [endpoint-create] Ajustar nome do arquivo tests. test_User_controller.py para test_user_controller.py
- DONE          [endpoint-create] Trocar entity para resource
- DONE          [endpoint-create] Adicionar {operation-id}{entidade}Response
- DONE          [endpoint-create] Adicionar {operation-id}{entidade}Request
- DONE          [endpoint-create] Tratar para retornar lista da entidade caso endpoint n contenha/{id} no método GET
- DONE          [endpoint-create] Tratar para retornar a entidade caso com /{id} no método GET
- DONE          [endpoint-create] Tratar para retornar algo quando for PUT, PATCH, POST, DELETE
- DONE          [endpoint-create] Adicionar logica de metodo do use_case, quando contém objeto ou tipo primitivo
- DONE          [endpoint-create] Remover import do {{Resource}}Request quando é [GET|DELETE] do use_case e controller
- DONE          [endpoint-create] Não gerar classe de {{Resource}}Request quando é [GET|DELETE]
- DONE          [endpoint-create] Adicionar retorno no controller com 200(GET, DELETE, PATCH, PUT) ou 201(POST)
- DONE          [endpoint-create] Renomear para 'lambda-endpoint-create-plugin' com commando 'endpoint-create'?
- DONE          [endpoint-create] Verificar necessidade do inptus do extract_data_from_inputs.py. Talvez diminuir o escopo
- DONE          [endpoint-create] Implementar logica para o gerar teste do controller. Lembrar de request e response
- DONE          [endpoint-create] Preencher dados da URI no teste
- DONE          [endpoint-create] Get List[{{ResourceResponse}}] n deveria ter , responses={404: {"description": "{{ResourceResponse}} not found"}})
- TODO          [endpoint-create] Adicionar regex para URI validando todo_regex.txt
- TODO          [docs]            Adicionar documentação do endpoint-create?
- FIX           [endpoint-create] Ajustar para obter nome do param query ao invés do valor. Ex.? ?query={query-my-own}, hoje pega query-my-own deveria pegar query para preencher no controller
- TALK_ABOUT    [endpoint-create] Tratar para preencher o id com dados do request
- TALK_ABOUT    [endpoint-create] Tratar quando for put, patch o {{Resource}}Request n deve conter o id, porém conter o que?
- TALK_ABOUT    [endpoint-create] Separar em pasta de teste de integração e unitário?
- TALK_ABOUT    [endpoint-create] Tratar aplicar o plugin quando já havia sido aplicado com os mesmos parâmetros?
- TALK_ABOUT    [endpoint-create] Permitir criar operation-id contendo números?
- TALK_ABOUT    [endpoint-create] Permitir criar resource contendo números?
- TODO          [cli-plugin]      Ajustar arquivo de usage.md para contemplar o run tasks
- TODO          [lambda-api-plugin]      Ajustar arquivo de implementation.md para conter a estrutura correta do projeto
- TODO          [lambda-api-plugin]      Ajustar arquivo de usage.md para contemplar o run tasks
- TODO          [lambda-api-plugin]      Ajustar arquivo de README.md para contemplar o run tasks
- DONE          [lambda-api-plugin]      Renomear 'lambda-api' para 'lambda-api-plugin'?
- TODO          [cli-plugin]      Testar validando funcionamento
- TODO          [cli-add-command-plugin]  Testar validando funcionamento
